# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from base_drive_chain/ControllerData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import base_drive_chain.msg

class ControllerData(genpy.Message):
  _md5sum = "3c35784ec8577aa62e884e136ae154dc"
  _type = "base_drive_chain/ControllerData"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """ControllerConfig controller_config
ControllerState controller_state
MotorState propulsion_state
MotorState steering_state


================================================================================
MSG: base_drive_chain/ControllerConfig
int16 can_id
int8 drive_direction
int16 home_speed
int32 home_count

================================================================================
MSG: base_drive_chain/ControllerState
int8 controller_mode
float32 battery_volts
float32 battery_amps
int16 max_temp
bool[] status_flags

================================================================================
MSG: base_drive_chain/MotorState
int16 speed
int32 position
float32 motor_amps
int16 relative_power
"""
  __slots__ = ['controller_config','controller_state','propulsion_state','steering_state']
  _slot_types = ['base_drive_chain/ControllerConfig','base_drive_chain/ControllerState','base_drive_chain/MotorState','base_drive_chain/MotorState']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       controller_config,controller_state,propulsion_state,steering_state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ControllerData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.controller_config is None:
        self.controller_config = base_drive_chain.msg.ControllerConfig()
      if self.controller_state is None:
        self.controller_state = base_drive_chain.msg.ControllerState()
      if self.propulsion_state is None:
        self.propulsion_state = base_drive_chain.msg.MotorState()
      if self.steering_state is None:
        self.steering_state = base_drive_chain.msg.MotorState()
    else:
      self.controller_config = base_drive_chain.msg.ControllerConfig()
      self.controller_state = base_drive_chain.msg.ControllerState()
      self.propulsion_state = base_drive_chain.msg.MotorState()
      self.steering_state = base_drive_chain.msg.MotorState()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_hbhib2fh().pack(_x.controller_config.can_id, _x.controller_config.drive_direction, _x.controller_config.home_speed, _x.controller_config.home_count, _x.controller_state.controller_mode, _x.controller_state.battery_volts, _x.controller_state.battery_amps, _x.controller_state.max_temp))
      length = len(self.controller_state.status_flags)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.controller_state.status_flags))
      _x = self
      buff.write(_get_struct_hif2hifh().pack(_x.propulsion_state.speed, _x.propulsion_state.position, _x.propulsion_state.motor_amps, _x.propulsion_state.relative_power, _x.steering_state.speed, _x.steering_state.position, _x.steering_state.motor_amps, _x.steering_state.relative_power))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.controller_config is None:
        self.controller_config = base_drive_chain.msg.ControllerConfig()
      if self.controller_state is None:
        self.controller_state = base_drive_chain.msg.ControllerState()
      if self.propulsion_state is None:
        self.propulsion_state = base_drive_chain.msg.MotorState()
      if self.steering_state is None:
        self.steering_state = base_drive_chain.msg.MotorState()
      end = 0
      _x = self
      start = end
      end += 20
      (_x.controller_config.can_id, _x.controller_config.drive_direction, _x.controller_config.home_speed, _x.controller_config.home_count, _x.controller_state.controller_mode, _x.controller_state.battery_volts, _x.controller_state.battery_amps, _x.controller_state.max_temp,) = _get_struct_hbhib2fh().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.controller_state.status_flags = struct.unpack(pattern, str[start:end])
      self.controller_state.status_flags = map(bool, self.controller_state.status_flags)
      _x = self
      start = end
      end += 24
      (_x.propulsion_state.speed, _x.propulsion_state.position, _x.propulsion_state.motor_amps, _x.propulsion_state.relative_power, _x.steering_state.speed, _x.steering_state.position, _x.steering_state.motor_amps, _x.steering_state.relative_power,) = _get_struct_hif2hifh().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_hbhib2fh().pack(_x.controller_config.can_id, _x.controller_config.drive_direction, _x.controller_config.home_speed, _x.controller_config.home_count, _x.controller_state.controller_mode, _x.controller_state.battery_volts, _x.controller_state.battery_amps, _x.controller_state.max_temp))
      length = len(self.controller_state.status_flags)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.controller_state.status_flags.tostring())
      _x = self
      buff.write(_get_struct_hif2hifh().pack(_x.propulsion_state.speed, _x.propulsion_state.position, _x.propulsion_state.motor_amps, _x.propulsion_state.relative_power, _x.steering_state.speed, _x.steering_state.position, _x.steering_state.motor_amps, _x.steering_state.relative_power))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.controller_config is None:
        self.controller_config = base_drive_chain.msg.ControllerConfig()
      if self.controller_state is None:
        self.controller_state = base_drive_chain.msg.ControllerState()
      if self.propulsion_state is None:
        self.propulsion_state = base_drive_chain.msg.MotorState()
      if self.steering_state is None:
        self.steering_state = base_drive_chain.msg.MotorState()
      end = 0
      _x = self
      start = end
      end += 20
      (_x.controller_config.can_id, _x.controller_config.drive_direction, _x.controller_config.home_speed, _x.controller_config.home_count, _x.controller_state.controller_mode, _x.controller_state.battery_volts, _x.controller_state.battery_amps, _x.controller_state.max_temp,) = _get_struct_hbhib2fh().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.controller_state.status_flags = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.controller_state.status_flags = map(bool, self.controller_state.status_flags)
      _x = self
      start = end
      end += 24
      (_x.propulsion_state.speed, _x.propulsion_state.position, _x.propulsion_state.motor_amps, _x.propulsion_state.relative_power, _x.steering_state.speed, _x.steering_state.position, _x.steering_state.motor_amps, _x.steering_state.relative_power,) = _get_struct_hif2hifh().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_hbhib2fh = None
def _get_struct_hbhib2fh():
    global _struct_hbhib2fh
    if _struct_hbhib2fh is None:
        _struct_hbhib2fh = struct.Struct("<hbhib2fh")
    return _struct_hbhib2fh
_struct_hif2hifh = None
def _get_struct_hif2hifh():
    global _struct_hif2hifh
    if _struct_hif2hifh is None:
        _struct_hif2hifh = struct.Struct("<hif2hifh")
    return _struct_hif2hifh
