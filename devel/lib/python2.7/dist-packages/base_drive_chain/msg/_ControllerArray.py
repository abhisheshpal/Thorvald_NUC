# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from base_drive_chain/ControllerArray.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import base_drive_chain.msg
import std_msgs.msg

class ControllerArray(genpy.Message):
  _md5sum = "bd69d6925463f483a09ba76d83f3c179"
  _type = "base_drive_chain/ControllerArray"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
ControllerData[] controller_data


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: base_drive_chain/ControllerData
ControllerConfig controller_config
ControllerState controller_state
MotorState propulsion_state
MotorState steering_state


================================================================================
MSG: base_drive_chain/ControllerConfig
int16 can_id
int8 drive_direction
int16 home_speed
int32 home_count

================================================================================
MSG: base_drive_chain/ControllerState
int8 controller_mode
float32 battery_volts
float32 battery_amps
int16 max_temp
bool[] status_flags

================================================================================
MSG: base_drive_chain/MotorState
int16 speed
int32 position
float32 motor_amps
int16 relative_power
"""
  __slots__ = ['header','controller_data']
  _slot_types = ['std_msgs/Header','base_drive_chain/ControllerData[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,controller_data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ControllerArray, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.controller_data is None:
        self.controller_data = []
    else:
      self.header = std_msgs.msg.Header()
      self.controller_data = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.controller_data)
      buff.write(_struct_I.pack(length))
      for val1 in self.controller_data:
        _v1 = val1.controller_config
        _x = _v1
        buff.write(_get_struct_hbhi().pack(_x.can_id, _x.drive_direction, _x.home_speed, _x.home_count))
        _v2 = val1.controller_state
        _x = _v2
        buff.write(_get_struct_b2fh().pack(_x.controller_mode, _x.battery_volts, _x.battery_amps, _x.max_temp))
        length = len(_v2.status_flags)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(struct.pack(pattern, *_v2.status_flags))
        _v3 = val1.propulsion_state
        _x = _v3
        buff.write(_get_struct_hifh().pack(_x.speed, _x.position, _x.motor_amps, _x.relative_power))
        _v4 = val1.steering_state
        _x = _v4
        buff.write(_get_struct_hifh().pack(_x.speed, _x.position, _x.motor_amps, _x.relative_power))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.controller_data is None:
        self.controller_data = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.controller_data = []
      for i in range(0, length):
        val1 = base_drive_chain.msg.ControllerData()
        _v5 = val1.controller_config
        _x = _v5
        start = end
        end += 9
        (_x.can_id, _x.drive_direction, _x.home_speed, _x.home_count,) = _get_struct_hbhi().unpack(str[start:end])
        _v6 = val1.controller_state
        _x = _v6
        start = end
        end += 11
        (_x.controller_mode, _x.battery_volts, _x.battery_amps, _x.max_temp,) = _get_struct_b2fh().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        end += struct.calcsize(pattern)
        _v6.status_flags = struct.unpack(pattern, str[start:end])
        _v6.status_flags = map(bool, _v6.status_flags)
        _v7 = val1.propulsion_state
        _x = _v7
        start = end
        end += 12
        (_x.speed, _x.position, _x.motor_amps, _x.relative_power,) = _get_struct_hifh().unpack(str[start:end])
        _v8 = val1.steering_state
        _x = _v8
        start = end
        end += 12
        (_x.speed, _x.position, _x.motor_amps, _x.relative_power,) = _get_struct_hifh().unpack(str[start:end])
        self.controller_data.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.controller_data)
      buff.write(_struct_I.pack(length))
      for val1 in self.controller_data:
        _v9 = val1.controller_config
        _x = _v9
        buff.write(_get_struct_hbhi().pack(_x.can_id, _x.drive_direction, _x.home_speed, _x.home_count))
        _v10 = val1.controller_state
        _x = _v10
        buff.write(_get_struct_b2fh().pack(_x.controller_mode, _x.battery_volts, _x.battery_amps, _x.max_temp))
        length = len(_v10.status_flags)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(_v10.status_flags.tostring())
        _v11 = val1.propulsion_state
        _x = _v11
        buff.write(_get_struct_hifh().pack(_x.speed, _x.position, _x.motor_amps, _x.relative_power))
        _v12 = val1.steering_state
        _x = _v12
        buff.write(_get_struct_hifh().pack(_x.speed, _x.position, _x.motor_amps, _x.relative_power))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.controller_data is None:
        self.controller_data = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.controller_data = []
      for i in range(0, length):
        val1 = base_drive_chain.msg.ControllerData()
        _v13 = val1.controller_config
        _x = _v13
        start = end
        end += 9
        (_x.can_id, _x.drive_direction, _x.home_speed, _x.home_count,) = _get_struct_hbhi().unpack(str[start:end])
        _v14 = val1.controller_state
        _x = _v14
        start = end
        end += 11
        (_x.controller_mode, _x.battery_volts, _x.battery_amps, _x.max_temp,) = _get_struct_b2fh().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        end += struct.calcsize(pattern)
        _v14.status_flags = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
        _v14.status_flags = map(bool, _v14.status_flags)
        _v15 = val1.propulsion_state
        _x = _v15
        start = end
        end += 12
        (_x.speed, _x.position, _x.motor_amps, _x.relative_power,) = _get_struct_hifh().unpack(str[start:end])
        _v16 = val1.steering_state
        _x = _v16
        start = end
        end += 12
        (_x.speed, _x.position, _x.motor_amps, _x.relative_power,) = _get_struct_hifh().unpack(str[start:end])
        self.controller_data.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_hifh = None
def _get_struct_hifh():
    global _struct_hifh
    if _struct_hifh is None:
        _struct_hifh = struct.Struct("<hifh")
    return _struct_hifh
_struct_b2fh = None
def _get_struct_b2fh():
    global _struct_b2fh
    if _struct_b2fh is None:
        _struct_b2fh = struct.Struct("<b2fh")
    return _struct_b2fh
_struct_hbhi = None
def _get_struct_hbhi():
    global _struct_hbhi
    if _struct_hbhi is None:
        _struct_hbhi = struct.Struct("<hbhi")
    return _struct_hbhi
