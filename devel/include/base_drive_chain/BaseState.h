// Generated by gencpp from file base_drive_chain/BaseState.msg
// DO NOT EDIT!


#ifndef BASE_DRIVE_CHAIN_MESSAGE_BASESTATE_H
#define BASE_DRIVE_CHAIN_MESSAGE_BASESTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace base_drive_chain
{
template <class ContainerAllocator>
struct BaseState_
{
  typedef BaseState_<ContainerAllocator> Type;

  BaseState_()
    : header()
    , drive_mode(0)
    , vel()
    , position()
    , pos_max_vel()  {
    }
  BaseState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , drive_mode(0)
    , vel(_alloc)
    , position(_alloc)
    , pos_max_vel(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int16_t _drive_mode_type;
  _drive_mode_type drive_mode;

   typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _vel_type;
  _vel_type vel;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _position_type;
  _position_type position;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _pos_max_vel_type;
  _pos_max_vel_type pos_max_vel;




  typedef boost::shared_ptr< ::base_drive_chain::BaseState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::base_drive_chain::BaseState_<ContainerAllocator> const> ConstPtr;

}; // struct BaseState_

typedef ::base_drive_chain::BaseState_<std::allocator<void> > BaseState;

typedef boost::shared_ptr< ::base_drive_chain::BaseState > BaseStatePtr;
typedef boost::shared_ptr< ::base_drive_chain::BaseState const> BaseStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::base_drive_chain::BaseState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::base_drive_chain::BaseState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace base_drive_chain

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'base_drive_chain': ['/home/vigneshnuc/catkin_ws/src/Thorvald/base_driver/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::base_drive_chain::BaseState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::base_drive_chain::BaseState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::base_drive_chain::BaseState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::base_drive_chain::BaseState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::base_drive_chain::BaseState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::base_drive_chain::BaseState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::base_drive_chain::BaseState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "63318a0806bc66c83a396c532d46cb86";
  }

  static const char* value(const ::base_drive_chain::BaseState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x63318a0806bc66c8ULL;
  static const uint64_t static_value2 = 0x3a396c532d46cb86ULL;
};

template<class ContainerAllocator>
struct DataType< ::base_drive_chain::BaseState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "base_drive_chain/BaseState";
  }

  static const char* value(const ::base_drive_chain::BaseState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::base_drive_chain::BaseState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
int16 drive_mode\n\
int16[] vel\n\
int32[] position\n\
int32[] pos_max_vel\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::base_drive_chain::BaseState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::base_drive_chain::BaseState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.drive_mode);
      stream.next(m.vel);
      stream.next(m.position);
      stream.next(m.pos_max_vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BaseState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::base_drive_chain::BaseState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::base_drive_chain::BaseState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "drive_mode: ";
    Printer<int16_t>::stream(s, indent + "  ", v.drive_mode);
    s << indent << "vel[]" << std::endl;
    for (size_t i = 0; i < v.vel.size(); ++i)
    {
      s << indent << "  vel[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.vel[i]);
    }
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.position[i]);
    }
    s << indent << "pos_max_vel[]" << std::endl;
    for (size_t i = 0; i < v.pos_max_vel.size(); ++i)
    {
      s << indent << "  pos_max_vel[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.pos_max_vel[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BASE_DRIVE_CHAIN_MESSAGE_BASESTATE_H
