// Generated by gencpp from file base_drive_chain/ControllerInfo.msg
// DO NOT EDIT!


#ifndef BASE_DRIVE_CHAIN_MESSAGE_CONTROLLERINFO_H
#define BASE_DRIVE_CHAIN_MESSAGE_CONTROLLERINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace base_drive_chain
{
template <class ContainerAllocator>
struct ControllerInfo_
{
  typedef ControllerInfo_<ContainerAllocator> Type;

  ControllerInfo_()
    : drive_directions()
    , home_counts()  {
    }
  ControllerInfo_(const ContainerAllocator& _alloc)
    : drive_directions(_alloc)
    , home_counts(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _drive_directions_type;
  _drive_directions_type drive_directions;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _home_counts_type;
  _home_counts_type home_counts;




  typedef boost::shared_ptr< ::base_drive_chain::ControllerInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::base_drive_chain::ControllerInfo_<ContainerAllocator> const> ConstPtr;

}; // struct ControllerInfo_

typedef ::base_drive_chain::ControllerInfo_<std::allocator<void> > ControllerInfo;

typedef boost::shared_ptr< ::base_drive_chain::ControllerInfo > ControllerInfoPtr;
typedef boost::shared_ptr< ::base_drive_chain::ControllerInfo const> ControllerInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::base_drive_chain::ControllerInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::base_drive_chain::ControllerInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace base_drive_chain

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'base_drive_chain': ['/home/vigneshnuc/catkin_ws/src/Thorvald/base_driver/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::base_drive_chain::ControllerInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::base_drive_chain::ControllerInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::base_drive_chain::ControllerInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::base_drive_chain::ControllerInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::base_drive_chain::ControllerInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::base_drive_chain::ControllerInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::base_drive_chain::ControllerInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e2b2ee8fe293fac17d5e53963eed123c";
  }

  static const char* value(const ::base_drive_chain::ControllerInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe2b2ee8fe293fac1ULL;
  static const uint64_t static_value2 = 0x7d5e53963eed123cULL;
};

template<class ContainerAllocator>
struct DataType< ::base_drive_chain::ControllerInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "base_drive_chain/ControllerInfo";
  }

  static const char* value(const ::base_drive_chain::ControllerInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::base_drive_chain::ControllerInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16[] drive_directions\n\
int32[] home_counts\n\
";
  }

  static const char* value(const ::base_drive_chain::ControllerInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::base_drive_chain::ControllerInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.drive_directions);
      stream.next(m.home_counts);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControllerInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::base_drive_chain::ControllerInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::base_drive_chain::ControllerInfo_<ContainerAllocator>& v)
  {
    s << indent << "drive_directions[]" << std::endl;
    for (size_t i = 0; i < v.drive_directions.size(); ++i)
    {
      s << indent << "  drive_directions[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.drive_directions[i]);
    }
    s << indent << "home_counts[]" << std::endl;
    for (size_t i = 0; i < v.home_counts.size(); ++i)
    {
      s << indent << "  home_counts[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.home_counts[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BASE_DRIVE_CHAIN_MESSAGE_CONTROLLERINFO_H
