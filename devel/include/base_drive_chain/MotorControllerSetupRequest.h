// Generated by gencpp from file base_drive_chain/MotorControllerSetupRequest.msg
// DO NOT EDIT!


#ifndef BASE_DRIVE_CHAIN_MESSAGE_MOTORCONTROLLERSETUPREQUEST_H
#define BASE_DRIVE_CHAIN_MESSAGE_MOTORCONTROLLERSETUPREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace base_drive_chain
{
template <class ContainerAllocator>
struct MotorControllerSetupRequest_
{
  typedef MotorControllerSetupRequest_<ContainerAllocator> Type;

  MotorControllerSetupRequest_()
    : can_id(0)
    , setup_id(0)
    , setup_value(0)  {
    }
  MotorControllerSetupRequest_(const ContainerAllocator& _alloc)
    : can_id(0)
    , setup_id(0)
    , setup_value(0)  {
  (void)_alloc;
    }



   typedef int32_t _can_id_type;
  _can_id_type can_id;

   typedef int32_t _setup_id_type;
  _setup_id_type setup_id;

   typedef int32_t _setup_value_type;
  _setup_value_type setup_value;




  typedef boost::shared_ptr< ::base_drive_chain::MotorControllerSetupRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::base_drive_chain::MotorControllerSetupRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MotorControllerSetupRequest_

typedef ::base_drive_chain::MotorControllerSetupRequest_<std::allocator<void> > MotorControllerSetupRequest;

typedef boost::shared_ptr< ::base_drive_chain::MotorControllerSetupRequest > MotorControllerSetupRequestPtr;
typedef boost::shared_ptr< ::base_drive_chain::MotorControllerSetupRequest const> MotorControllerSetupRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::base_drive_chain::MotorControllerSetupRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::base_drive_chain::MotorControllerSetupRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace base_drive_chain

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'base_drive_chain': ['/home/vigneshnuc/catkin_ws/src/Thorvald/base_driver/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::base_drive_chain::MotorControllerSetupRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::base_drive_chain::MotorControllerSetupRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::base_drive_chain::MotorControllerSetupRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::base_drive_chain::MotorControllerSetupRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::base_drive_chain::MotorControllerSetupRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::base_drive_chain::MotorControllerSetupRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::base_drive_chain::MotorControllerSetupRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cfaf3ea59d6ff6b4547617a713b1cba6";
  }

  static const char* value(const ::base_drive_chain::MotorControllerSetupRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcfaf3ea59d6ff6b4ULL;
  static const uint64_t static_value2 = 0x547617a713b1cba6ULL;
};

template<class ContainerAllocator>
struct DataType< ::base_drive_chain::MotorControllerSetupRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "base_drive_chain/MotorControllerSetupRequest";
  }

  static const char* value(const ::base_drive_chain::MotorControllerSetupRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::base_drive_chain::MotorControllerSetupRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 can_id\n\
int32 setup_id\n\
int32 setup_value\n\
";
  }

  static const char* value(const ::base_drive_chain::MotorControllerSetupRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::base_drive_chain::MotorControllerSetupRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.can_id);
      stream.next(m.setup_id);
      stream.next(m.setup_value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorControllerSetupRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::base_drive_chain::MotorControllerSetupRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::base_drive_chain::MotorControllerSetupRequest_<ContainerAllocator>& v)
  {
    s << indent << "can_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.can_id);
    s << indent << "setup_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.setup_id);
    s << indent << "setup_value: ";
    Printer<int32_t>::stream(s, indent + "  ", v.setup_value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BASE_DRIVE_CHAIN_MESSAGE_MOTORCONTROLLERSETUPREQUEST_H
